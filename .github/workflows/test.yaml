name: Merge Alert 

on:
  push:
   branches: 
     - main
  pull_request:
   
jobs:
  test:
    runs-on: ubuntu-18.04  
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.
      
      - name: Get config map changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v18.6
        with:
          files: |
            index.html
            templates/NOTES.txt

      - name: update config map command 
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          echo "0chain config maps updated ."
          cat index.html
          curl -X POST -H 'Content-type: application/json' --data '{"text":"0chain config map updated."}' ${{ secrets.CHANNEL_WEBHOOK_URL }}
          cat <<\EOF > val.yaml
            i
            am
            testing
            config
            map
            in
            git
            action
            in
            task
          EOF
      
      - name:  update values.yaml
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
           echo "updated values.yaml."
           cat 
           ls -la
           pwd
           sed -i -e 's/^/    /' index.html &&  sed -i '3  r index.html' val.yaml > test
           echo "$test"
           cat val.yaml
           tail val.yaml
           more val.yaml
           ls -la
           
      - name: Get changed files 
        id: changed-files
        uses: tj-actions/changed-files@v18.4   
     
      - name: get docker image name
        id: get_info
        run: |
         if [[ "${{github.ref}}" == refs/pull/* ]]; then
          tag=${GITHUB_REF/\/merge/}
          echo "TAG=$(echo pr-${tag:10})" >> $GITHUB_ENV
         else
          echo "TAG=$(echo ${GITHUB_REF#refs/*/} | sed 's/\//-/g')" >> $GITHUB_ENV
         fi
         echo "BRANCH=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo ${GITHUB_REF#refs/*/} || echo $GITHUB_HEAD_REF)" >> $GITHUB_ENV
         echo "SHA=$([ -z '${{ github.event.pull_request.head.sha }}' ] && echo $GITHUB_SHA || echo '${{ github.event.pull_request.head.sha }}')" >> $GITHUB_ENV
      
      - name: image name 
        id: image_name
        run: |
         SHORT_SHA=$(echo ${{ env.SHA }} | head -c 8)
         echo "NAME=$TAG-$SHORT_SHA" >> $GITHUB_ENV 
  
      - name: update image on network  
        run: |
          echo "Sharder/Miner:${{ env.NAME }} updated to the network."
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Sharder/Miner:${{ env.NAME }} image updated on network name."}' ${{ secrets.CHANNEL_WEBHOOK_URL }}
